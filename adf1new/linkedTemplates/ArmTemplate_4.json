{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf1new"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable109')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase92",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText27')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "is_blobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "aggregrate.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COUNTRY",
						"type": "String"
					},
					{
						"name": "YEAR",
						"type": "String"
					},
					{
						"name": "PRODUCT_TYPE",
						"type": "String"
					},
					{
						"name": "SALES",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable110')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase92",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob to adls')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText11",
								"type": "DatasetReference"
							},
							"name": "readfromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText12",
								"type": "DatasetReference"
							},
							"name": "writeintoadls"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Series_reference as string,",
						"          Period as float,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 10,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> readfromblob",
						"readfromblob filter(Period==2001.03) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     partitionFileNames:['DEVIRED.XLSX'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> writeintoadls"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SEPRATE YEAR AND COUNTRY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText13",
								"type": "DatasetReference"
							},
							"name": "READTHEDATA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText14",
								"type": "DatasetReference"
							},
							"name": "writetoadls"
						}
					],
					"transformations": [
						{
							"name": "TOSEPRATEYEARANDCOUNTRY"
						},
						{
							"name": "selectedrows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          SALES as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> READTHEDATA",
						"READTHEDATA derive(YEAR = toInteger(trim(right(COUNTRY,6), '()')),",
						"          COUNTRY = toString(left(COUNTRY, length(COUNTRY)-6))) ~> TOSEPRATEYEARANDCOUNTRY",
						"TOSEPRATEYEARANDCOUNTRY select(mapColumn(",
						"          COUNTRY,",
						"          SALES,",
						"          YEAR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectedrows",
						"selectedrows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> writetoadls"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CONDITIONAL SPLIT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText16",
								"type": "DatasetReference"
							},
							"name": "CONDITION"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText17",
								"type": "DatasetReference"
							},
							"name": "USAUK"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText17",
								"type": "DatasetReference"
							},
							"name": "USAIND"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText17",
								"type": "DatasetReference"
							},
							"name": "DEFAULT"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText17",
								"type": "DatasetReference"
							},
							"name": "AUSSA"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          COUNTRY as string,",
						"          YEAR as string,",
						"          PRODUCT as string,",
						"          SALES as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> CONDITION",
						"CONDITION split(COUNTRY=='USA'||COUNTRY=='UK',",
						"     COUNTRY=='USA'||COUNTRY=='IND',",
						"     COUNTRY=='AUS'||COUNTRY=='SA',",
						"     disjoint: true,",
						"     partitionBy('hash', 1)) ~> split1@(USAUK, USAIND, AUSSA, DEFAULT)",
						"split1@USAUK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     partitionFileNames:['USAUK.CSV'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> USAUK",
						"split1@USAIND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     partitionFileNames:['USAIND.CSV'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> USAIND",
						"split1@DEFAULT sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     partitionFileNames:['DEFAULT.CSV'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DEFAULT",
						"split1@AUSSA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     partitionFileNames:['AUSSA.CSV'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AUSSA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/alteringrows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable108",
								"type": "DatasetReference"
							},
							"name": "filterdatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText19",
								"type": "DatasetReference"
							},
							"name": "writeintosql"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          generes as string,",
						"          year as string,",
						"          rating as string,",
						"          {rotton tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> filterdatafromblob",
						"filterdatafromblob alterRow(deleteIf(year<'1990'||isNull(year)),",
						"     updateIf(title=='waiting'),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"derivedColumn1 select(mapColumn(",
						"          movie,",
						"          title,",
						"          generes,",
						"          year",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"alterRow1 derive(title = title + '(' +toString(year)+ ')') ~> derivedColumn1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Series_reference as string,",
						"          Period as string,",
						"          Data_value as string,",
						"          Suppressed as string,",
						"          STATUS as string,",
						"          UNITS as string,",
						"          Magnitude as string,",
						"          Subject as string,",
						"          Group as string,",
						"          Series_title_1 as string,",
						"          Series_title_2 as string,",
						"          Series_title_3 as string,",
						"          Series_title_4 as string,",
						"          Series_title_5 as string",
						"     ),",
						"     partitionFileNames:['updated.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> writeintosql"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookupoactivity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "newcountriesdata",
								"type": "DatasetReference"
							},
							"name": "newcountries"
						},
						{
							"dataset": {
								"referenceName": "countriesdata",
								"type": "DatasetReference"
							},
							"name": "countries"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "matching",
								"type": "DatasetReference"
							},
							"name": "matchingrecords"
						},
						{
							"dataset": {
								"referenceName": "nonmatching",
								"type": "DatasetReference"
							},
							"name": "nonmatching"
						}
					],
					"transformations": [
						{
							"name": "readingdatafromtwosources"
						},
						{
							"name": "splitnonmatchingrecords"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> newcountries",
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> countries",
						"newcountries, countries lookup(newcountries@id == countries@id,",
						"     multiple: true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> readingdatafromtwosources",
						"readingdatafromtwosources split(isMatch(),",
						"     disjoint: false) ~> splitnonmatchingrecords@(matchingrecords, nonmatchingrecords)",
						"splitnonmatchingrecords@matchingrecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> matchingrecords",
						"splitnonmatchingrecords@nonmatchingrecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> nonmatching"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/joins')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText20",
								"type": "DatasetReference"
							},
							"name": "join"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText21",
								"type": "DatasetReference"
							},
							"name": "join1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText22",
								"type": "DatasetReference"
							},
							"name": "towritedestination"
						}
					],
					"transformations": [
						{
							"name": "join2"
						},
						{
							"name": "selectedrows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> join",
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> join1",
						"join, join1 join(join@CUST_ID==join1@CUST_ID,",
						"     joinType:'cross',",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          ROW = join@ROW,",
						"          COUNTRY = join@COUNTRY,",
						"          YEARS = join@YEARS,",
						"          SALES = join@SALES,",
						"          CUST_ID = join@CUST_ID,",
						"          ROW = join1@ROW,",
						"          COUNTRY = join1@COUNTRY,",
						"          YEARS = join1@YEARS,",
						"          SALES = join1@SALES,",
						"          CUST_ID = join1@CUST_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectedrows",
						"selectedrows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['cross.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> towritedestination"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/uniontransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText23",
								"type": "DatasetReference"
							},
							"name": "union"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText24",
								"type": "DatasetReference"
							},
							"name": "union1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsdestination",
								"type": "DatasetReference"
							},
							"name": "writedataintoadls"
						}
					],
					"transformations": [
						{
							"name": "pickingtwotablesdata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> union",
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> union1",
						"union, union1 union(byName: false)~> pickingtwotablesdata",
						"pickingtwotablesdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     partitionFileNames:['unionposition.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> writedataintoadls"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/exit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText25",
								"type": "DatasetReference"
							},
							"name": "exit"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText26",
								"type": "DatasetReference"
							},
							"name": "exit1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsdestination",
								"type": "DatasetReference"
							},
							"name": "writeintodestination"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> exit",
						"source(output(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> exit1",
						"exit, exit1 exists(exit@CUST_ID == exit1@CUST_ID,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     partitionFileNames:['notexists.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> writeintodestination"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable109",
								"type": "DatasetReference"
							},
							"name": "pivotdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsdestination",
								"type": "DatasetReference"
							},
							"name": "writedestition"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 100,",
						"     isolationLevel: 'READ_COMMITTED',",
						"     format: 'table') ~> pivotdata",
						"derivedColumn1 pivot(groupBy(Size),",
						"     pivotBy(Color, ['Multi']),",
						"     Avg = avg(StandardCost),",
						"     columnNaming: '$N_$V_caculate',",
						"     lateral: true) ~> pivot1",
						"pivotdata derive(Size = iif(isNull(Size)||Size=='null', 'na',Size),",
						"          Color = iif(isNull(Color)||Color=='null', 'na',Color)) ~> derivedColumn1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     partitionFileNames:['pivot.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> writedestition"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable109')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregrate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText27",
								"type": "DatasetReference"
							},
							"name": "aggregrate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsdestination",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          COUNTRY as string,",
						"          YEAR as integer,",
						"          PRODUCT_TYPE as string,",
						"          SALES as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> aggregrate",
						"aggregrate aggregate(groupBy(COUNTRY),",
						"     sumsales = sum(SALES),",
						"          avgsales = round(avg(SALES),2),",
						"          maxsales = max(SALES),",
						"          countsales = count(SALES)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ROW as string,",
						"          COUNTRY as string,",
						"          YEARS as string,",
						"          SALES as string,",
						"          CUST_ID as string",
						"     ),",
						"     partitionFileNames:['aggregrate.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText27')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy data to blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "file exit are not",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.sourcefile",
										"type": "Expression"
									}
								}
							},
							"timeout": "0.00:00:30",
							"sleep": 10,
							"minimumSize": 1024
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "file exit are not",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.sourcefile",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"columnCount",
								"contentMD5",
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition true are false",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata1').output.columnCount,39)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "false condition",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://dummy method",
										"method": "POST",
										"headers": {},
										"body": "dummy"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data blob to adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "input//11_7_01_tab.txt"
										},
										{
											"name": "Destination",
											"value": "output/data/finincial.txt"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_source",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.sourcefile",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "delete soure file once loaded",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data blob to adls",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_source",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.sourcefile",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "is_blobstorage",
												"type": "LinkedServiceReference"
											},
											"path": "deletedfiles"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcefile": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-09T16:11:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pass parameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_source",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T04:01:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy data http to asls gen2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "http_dataset",
								"type": "DatasetReference",
								"parameters": {
									"baseurl": {
										"value": "@pipeline().parameters.sourceurlbase",
										"type": "Expression"
									},
									"relativeurl": {
										"value": "@pipeline().parameters.sourcerelativeurl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceurlbase": {
						"type": "string"
					},
					"sourcerelativeurl": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T06:59:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pass variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy datafrom http to adls",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "http_dataset",
								"type": "DatasetReference",
								"parameters": {
									"baseurl": {
										"value": "@variables('sourcebaseurl')",
										"type": "Expression"
									},
									"relativeurl": {
										"value": "@variables('sourcerelativeurl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourcerelativeurl",
							"value": "suresh12345/AzureDataEngineering_Batch/main/ecdc_data/testing.csv"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"sourcebaseurl": {
						"type": "String",
						"defaultValue": "https://raw.githubusercontent.com/"
					},
					"sourcerelativeurl": {
						"type": "String",
						"defaultValue": "suresh12345/AzureDataEngineering_Batch/main/ecdc_data/testing.csv"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T14:32:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy file without json file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_to_adls",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@adddays(utcnow(),-6)",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childitems",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "bolb to adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dset_output",
											"type": "DatasetReference",
											"parameters": {
												"sinkfilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T15:07:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/reading textfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ls_dset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.txt' )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter files",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filter2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'csv' )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.json')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T15:27:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/diffrent file formats')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dset_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "copy json file",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.json')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy text file",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.txt')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy csv files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy jpg file",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.jpg')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "foreach json file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "copy json file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('copy json file').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy json file data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "copyJsonfile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "storeJsonfile",
											"type": "DatasetReference",
											"parameters": {
												"sink file name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "load text files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "copy text file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('copy text file').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy datafrom text file",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "copydataset",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "loadtxtfile",
											"type": "DatasetReference",
											"parameters": {
												"sink file name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "load csv file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "copy csv files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('copy csv files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dset_data",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "toloadcsvdata",
											"type": "DatasetReference",
											"parameters": {
												"sinkcsvdata": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "load jgp file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "copy jpg file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('copy jpg file').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary2",
											"type": "DatasetReference",
											"parameters": {
												"sinkjpgfiles": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-11T05:15:22Z"
			},
			"dependsOn": []
		}
	]
}