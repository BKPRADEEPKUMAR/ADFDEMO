{
	"name": "alteringrows",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable108",
						"type": "DatasetReference"
					},
					"name": "filterdatafromblob"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText19",
						"type": "DatasetReference"
					},
					"name": "writeintosql"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          generes as string,",
				"          year as string,",
				"          rating as string,",
				"          {rotton tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> filterdatafromblob",
				"filterdatafromblob alterRow(deleteIf(year<'1990'||isNull(year)),",
				"     updateIf(title=='waiting'),",
				"     partitionBy('hash', 1)) ~> alterRow1",
				"derivedColumn1 select(mapColumn(",
				"          movie,",
				"          title,",
				"          generes,",
				"          year",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"alterRow1 derive(title = title + '(' +toString(year)+ ')') ~> derivedColumn1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Series_reference as string,",
				"          Period as string,",
				"          Data_value as string,",
				"          Suppressed as string,",
				"          STATUS as string,",
				"          UNITS as string,",
				"          Magnitude as string,",
				"          Subject as string,",
				"          Group as string,",
				"          Series_title_1 as string,",
				"          Series_title_2 as string,",
				"          Series_title_3 as string,",
				"          Series_title_4 as string,",
				"          Series_title_5 as string",
				"     ),",
				"     partitionFileNames:['updated.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> writeintosql"
			]
		}
	}
}